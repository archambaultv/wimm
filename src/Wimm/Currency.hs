-- |
-- Module      :  Wimm.Currency
-- Copyright   :  Â© 2022 Vincent Archambault
-- License     :  MIT
--
-- Maintainer  :  Vincent Archambault <vincentarchambault@icloud.com>
-- Stability   :  experimental
--
-- This module defines what is a currency. Althought wimm is a single currency
-- programm, we need some info about this currency. 

module Wimm.Currency
    ( Currency(..)
    ) where

import Data.Aeson (ToJSON, FromJSON, toEncoding, genericToEncoding, defaultOptions)
import GHC.Generics (Generic)
import qualified Data.Text as T

-- | The description of a currency. 
data Currency = Currency {
    cId :: Int, -- Generated by the program, not the user.
    cName :: T.Text, -- Name of the currency.
    cDecimalSep :: T.Text, -- The symbol for the currency decimal separator.
    cNbOfDecimal :: Int, -- How many decimal place for this currency.
    cSymbol :: T.Text, -- The symbol of the currency.
    cSymbolBeforeAmount :: Bool -- Where to place the symbol, before or after the amount.
    }
    deriving (Show, Generic)

-- | We simply use the name when comparing currencies
instance Eq Currency where
    (==) c1 c2 = cId c1 == cId c2

instance ToJSON Currency where
    toEncoding = genericToEncoding defaultOptions

instance FromJSON Currency